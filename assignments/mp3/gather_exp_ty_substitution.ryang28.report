
mp3 grade report for ryang28
================================

*Regular Problems:
Grading script score  => [61 / 61]
Late Penalty          => 0
Point adjustments     =>
Total                 => 61

Typing_and_Type_Systems-polymorphicTypeDerivations-code_ocaml_autograded-gather_exp_ty_substitution/grader program output
---------------------


[0 / 0] infer2_exp env0 con_exp1 (correct)
[1 / 1] infer2_exp env1 var_exp1 (correct)
[1 / 1] infer2_exp env2 var_exp2 (correct)
[1 / 1] infer2_exp env2 var_exp3 (correct)
[1 / 1] canon_gather env2 var_exp1 full_inst_ty (correct)
[1 / 1] canon_gather env3 var_exp2 full_inst_ty (correct)
[1 / 1] infer2_exp env0 bin_exp1 (correct)
[1 / 1] infer2_exp env0 int_binop_exp (correct)
[1 / 1] infer2_exp env0 float_binop_exp (correct)
[1 / 1] infer2_exp env2 poly_binop_exp (correct)
[1 / 1] infer2_exp env0 fail_bin1 (correct)
[1 / 1] canon_gather env3 fail_bin2 fail_bin2_ty (correct)
[1 / 1] canon_gather env2 fail_bin3 fail_bin3_ty (correct)
[1 / 1] infer2_exp env0 mon_exp1 (correct)
[1 / 1] infer2_exp env0 monop_exp (correct)
[1 / 1] canon_list_gather [(env0,MonOpAppExp(IntNegOp, (ConstExp NilConst)), TyVar 0); (env0,MonOpAppExp(FstOp, (ConstExp NilConst)), TyVar 0); (env0,MonOpAppExp(SndOp, (ConstExp NilConst)), TyVar 0); (env0,MonOpAppExp(HdOp, (ConstExp (IntConst 13))), TyVar 0); (env0,MonOpAppExp(TlOp, (ConstExp (IntConst 13))), TyVar 0); (env1,MonOpAppExp(IntNegOp, var_exp3), TyVar 0); (env1,MonOpAppExp(FstOp, var_exp3), TyVar 0); (env1,MonOpAppExp(SndOp, var_exp3), TyVar 0); (env1,MonOpAppExp(HdOp, var_exp3), TyVar 0); (env1,MonOpAppExp(TlOp, var_exp3), TyVar 0)] (correct)
[1 / 1] infer2_exp env0 if_exp1 (correct)
[1 / 1] infer2_exp env1 if_exp2 (correct)
[1 / 1] infer2_exp env0 if_exp3 (correct)
[1 / 1] infer2_exp env0 if_exp4 (correct)
[1 / 1] canon_gather if_exp5_env if_exp5 (TyVar (-17)) (correct)
[1 / 1] infer2_exp env0 if_exp6 (correct)
[1 / 1] infer2_exp env0 if_exp7 (correct)
[1 / 1] infer2_exp env0 if_exp8 (correct)
[1 / 1] infer2_exp env2 if_exp9 (correct)
[1 / 1] infer2_exp env0 if_exp10 (correct)
[1 / 1] infer2_exp env0 fun_exp1 (correct)
[1 / 1] infer2_exp env2 fun_exp1 (correct)
[1 / 1] canon_gather env0 fun_exp3 (mk_fun_ty int_ty bool_ty) (correct)
[1 / 1] canon_gather env0 fun_exp3 (mk_fun_ty int_ty int_ty) (correct)
[1 / 1] canon_gather env0 fun_exp3 bool_ty (correct)
[1 / 1] infer2_exp env0 fun_exp2 (correct)
[1 / 1] infer2_exp env0 fun_exp5 (correct)
[1 / 1] infer2_exp env0 fun_exp6 (correct)
[1 / 1] infer2_exp env0 fun_app_exp (correct)
[1 / 1] infer2_exp env0 app_fun_exp (correct)
[1 / 1] infer2_exp env0 app_fun_app_exp (correct)
[1 / 1] infer2_exp env0 app_exp1 (correct)
[1 / 1] infer2_exp env1 app_exp2 (correct)
[1 / 1] infer2_exp env2 app_exp3 (correct)
[1 / 1] infer2_exp envp app_exp4 (correct)
[1 / 1] infer2_exp env2 app_exp5 (correct)
[1 / 1] infer2_exp [("xx",([],TyVar(-4)))] (AppExp(VarExp "xx", AppExp(VarExp "xx", ConstExp (IntConst 7)))) (correct)
[1 / 1] canon_list_gather [(env3, app_exp3, int_ty); (env2, app_exp3, int_ty); (env3, app_exp6, full_inst_ty)] (correct)
[1 / 1] infer2_exp env2 (AppExp(var_exp2, var_exp2)) (correct)
[1 / 1] infer2_exp env0 raise_exp1 (correct)
[2 / 2] infer2_exp env2 raise_exp2 (correct)
[1 / 1] infer2_exp env1 raise_exp3 (correct)
[2 / 2] infer2_exp env0 raise_exp3 (correct)
[1 / 1] canon_gather env3 raise_exp4 full_inst_ty (correct)
[1 / 1] infer2_exp env0 letin_exp1 (correct)
[1 / 1] infer2_exp env2 letin_exp2 (correct)
[1 / 1] canon_list_gather [(env0, letin_exp3, bool_ty); ([("xz",poly_int_ty)], letin_exp3, bool_ty)] (correct)
[1 / 1] infer2_exp env2 letin_exp4 (correct)
[1 / 1] canon_list_gather [(env1, letin_exp5, int_ty); (env1, letin_exp6, bool_ty)] (correct)
[1 / 1] infer2_exp env0 letrecin_exp1 (correct)
[1 / 1] canon_list_gather [(env1, letrecin_exp2, int_ty); (env1, letrecin_exp2, bool_ty)] (correct)
[1 / 1] canon_list_gather [(env1, letrecin_exp3a, TyVar 13); (env1, letrecin_exp3b, TyVar 22)] (correct)
[1 / 1] canon_list_gather [(env1, letrecin_exp4a, mk_pair_ty int_ty bool_ty); (env1, letrecin_exp4b, int_ty)] (correct)
[1 / 1] canon_gather env0 letrecin_exp5 (mk_fun_ty int_ty int_ty) (correct)

Total: [61 / 61]
Extra: [0 / 0]

Additional output from compiling students code (may be empty)
----------------------------------------------------



Student's code (with comments and point adjustments)
----------------------------------------------------


---------/Users/elsa/courses/cs421/fa2017/private/curSemesterFiles/gradedMPs/mp3/Typing_and_Type_Systems-polymorphicTypeDerivations-code_ocaml_autograded-gather_exp_ty_substitution/ryang28/on_time/gather_exp_ty_substitution.ml--------
open Common
(* Leave this line here! *)
(* Put code for app at the bottom, after removing the raise. *)
let rec gather_exp_ty_substitution gamma exp tau =
    let judgment = ExpJudgment(gamma, exp, tau) in
    match exp
    with ConstExp c ->
         let tau' = const_signature c in
         (match unify [(tau, freshInstance tau')]
          with None       -> None
             | Some sigma -> Some(Proof([],judgment), sigma))
    | VarExp x ->
    	(match lookup_env gamma x 
    	 with None	-> None
    		| Some gamma_x->
    			(match unify [(tau, freshInstance gamma_x)]
    			 with None	-> None
    				| Some sigma->Some(Proof([],judgment), sigma)))
    | BinOpAppExp(binop, e1, e2)->
    	let tau' = binop_signature binop in
    	let tau1 = fresh() in
    	let tau2 = fresh() in
    	(match gather_exp_ty_substitution gamma e1 tau1 
    	 with None	-> None
    	 	| Some (pf1, sigma1)->
    	 	(match gather_exp_ty_substitution (env_lift_subst sigma1 gamma) e2 tau2
    	 	 with None	-> None
    	 		| Some (pf2, sigma2)->
    	 		let sigma21 = subst_compose sigma2 sigma1 in
    	 		(match unify [((monoTy_lift_subst sigma21 (mk_fun_ty tau1 (mk_fun_ty tau2 tau))), freshInstance tau')]
    	 		 with None	-> None
    	 		 	| Some sigma3->
    	 		 			Some(Proof(pf1::pf2::[], judgment), subst_compose sigma3 sigma21)))) (* !!! *)
    |MonOpAppExp(monop, e1)->
    	let tau' = monop_signature monop in
    	let tau1 = fresh() in
    	(match gather_exp_ty_substitution gamma e1 tau1
    	 with None 	-> None
    		| Some (pf, sigma)->
    			(match unify [(monoTy_lift_subst sigma (mk_fun_ty tau1 tau)), freshInstance tau']
    			 with None	-> None
    				| Some sigma1->
    							Some(Proof(pf::[], judgment), subst_compose sigma1 sigma)))
    |IfExp(e1, e2, e3)->
     	(match gather_exp_ty_substitution gamma e1 bool_ty 
     	 with None 	-> 	None
     	 	| Some (pf1, sigma1)->
     	 		(match gather_exp_ty_substitution (env_lift_subst sigma1 gamma) e2 (monoTy_lift_subst sigma1 tau)
     	 		 with None 	-> None
     	 			| Some(pf2, sigma2)->
     	 			let sigma21 = subst_compose sigma2 sigma1 in 
     	 			(match gather_exp_ty_substitution (env_lift_subst sigma21 gamma) e3 (monoTy_lift_subst sigma21 tau)
     	 			 with None	-> None
     	 			 	| Some (pf3, sigma3)->
     	 					Some(Proof(pf1::pf2::pf3::[], judgment), subst_compose sigma3 sigma21))))
    |FunExp(x, e)->
    	let tau1 = fresh() in
    	let tau2 = fresh() in
    	(match gather_exp_ty_substitution (ins_env gamma x (polyTy_of_monoTy tau1)) e tau2 
    	 with None	-> None
    		| Some (pf, sigma)->
    			(match unify [monoTy_lift_subst sigma tau, monoTy_lift_subst sigma (mk_fun_ty tau1 tau2)]
    			 with None	-> None
    			 	| Some sigma1->
    			 		Some(Proof(pf::[], judgment), subst_compose sigma1 sigma)))
    |AppExp(e1, e2)->
    	let tau1 = fresh() in
    	(match gather_exp_ty_substitution gamma e1 (mk_fun_ty tau1 tau)
    	 with None	-> None
    		| Some (pf1, sigma1)->
    			(match gather_exp_ty_substitution (env_lift_subst sigma1 gamma) e2 (monoTy_lift_subst sigma1 tau1)
    			 with None	-> None
    			 	| Some (pf2, sigma2)->
    			 		Some(Proof(pf1::pf2::[], judgment), subst_compose sigma2 sigma1)))
    |RaiseExp e->
    	(match gather_exp_ty_substitution gamma e int_ty
    	 with None	-> None
    		| Some (pf, sigma)->
    			Some(Proof(pf::[], judgment), sigma))
    |LetInExp(x, e1, e2)->
    	let tau1 = fresh() in
    	(match gather_exp_ty_substitution gamma e1 tau1
    	 with None	-> 	None
    		| Some (pf1, sigma1)->
    			let delta_env = make_env x (gen(env_lift_subst sigma1 gamma) (monoTy_lift_subst sigma1 tau1)) in
    				(match gather_exp_ty_substitution (sum_env delta_env (env_lift_subst sigma1 gamma)) e2 (monoTy_lift_subst sigma1 tau)
    				 with None	-> None
    				 	| Some (pf2, sigma2)-> 
    				 		Some(Proof(pf1::pf2::[], judgment), (subst_compose sigma2 sigma1))))
    |LetRecInExp(f,x,e1,e2)->
    	let tau1 = fresh() in
    	let tau2 = fresh() in
    	(match gather_exp_ty_substitution (ins_env (ins_env gamma f (polyTy_of_monoTy (mk_fun_ty tau1 tau2))) x (polyTy_of_monoTy tau1)) e1 tau2
    	 with None	-> None
    	 	| Some(pf1, sigma1)->
    	 		let sigma1_gamma = env_lift_subst sigma1 gamma in
    	 		let sigma1_tau1_tau2 = monoTy_lift_subst sigma1 (mk_fun_ty tau1 tau2) in
    	 		(match gather_exp_ty_substitution (ins_env sigma1_gamma f (gen sigma1_gamma sigma1_tau1_tau2)) e2 (monoTy_lift_subst sigma1 tau)
    	 		 with None	-> None
    	 		 	| Some(pf2, sigma2)->
    	 		 	Some(Proof(pf1::pf2::[], judgment), (subst_compose sigma2 sigma1))))
    |TryWithExp (e,intopt1,e1, match_list) ->
      (match (gather_exp_ty_substitution gamma e tau)
       with None -> None
       | Some (pf, sigma) ->
         (match
           List.fold_left
           (fun part_result -> fun (intopti, ei) ->
            (match part_result with None -> None
             | Some (rev_pflist, comp_sigmas) ->
               (match gather_exp_ty_substitution
                      (env_lift_subst comp_sigmas gamma) ei
                      (monoTy_lift_subst comp_sigmas tau)
                with None -> None
                | Some (pfi, sigmai) ->
                  Some (pfi :: rev_pflist, subst_compose sigmai comp_sigmas))))
           (Some([pf], sigma))
           ((intopt1,e1):: match_list)
           with None -> None
           | Some (rev_pflist, comp_subst) ->
             Some(Proof(List.rev rev_pflist, judgment), comp_subst)))
------------------------------------------------------

Stdout
----------------------------------------------------


